// Вначале, для понимания создали код таким образом
// // создаем анонимную самовызывающуюся функцию для доступа к элементам на странице
// (() => {
//     const $ = function(selector) {
//         const elements = document.querySelectorAll(selector);
//         const obj = {};
        
//         // создаем методы, позволяющие скрывать и показывать содержимое элементов. Но просто так они работать не будут. Они хранятся только внутри объекта. Для того, чтобы функция умела с ними работать, необходимо, чтобы она вернула объект (в конце функции). Но, если мы хотим, чтоб можно было использовать эти методы последовательно друг за другом, то и каждый из них должен возвращать объект
//         obj.hide = () => {
//             elements.forEach(elem => {
//                 elem.style.display = 'none';
//             });
//             return obj;
//         };

//         obj.show = () => {
//             elements.forEach(elem => {
//                 elem.style.display = '';
//             });
//             return obj;
//         };

//         return obj;
//     };

//     // Записываем созданную функцию в глобальный объект window. Теперь для доступа к элементам можно будет использовать просто $. В window.$ вместо $ можно было бы использовать другое обозначение. Оно тоже работало бы.
//     window.$ = $;
// })();


// Далее, для правильности, переписали:
// Каждый раз при запуске функции $ будет создаваться новый объект. Будет вызываться метод, который записан в прототипе этой функции
const $ = function(selector) {
    return new $.prototype.init(selector);
};

$.prototype.init = function(selector) {
    // если селектор не передан, то вернется пустой объект
    if (!selector) {
        return this;
    }

    // проверка на то, что передали не селектор, а сам элемент (ноду). В этом случае в объект запишется она сама. Дальше код не пойдет
    if (selector.tagName) {
        this[0] = selector;
        this.length = 1;
        return this;
    }

    // добавляем к объекту псевдомассив
    Object.assign(this, document.querySelectorAll(selector));
    // добавляем метод length
    this.length = document.querySelectorAll(selector).length;

    return this;
};

// второй прототип будет относться к объекту, который возвращает метод init. В него мы записываем прототип главной функции. Теперь для объекта, который создается при помощи $ мы можем использовать любые методы, которые находятся внутри прототипа этой функции
$.prototype.init.prototype = $.prototype;

// Записываем эту функцию в глобальный объект window
window.$ = $;

// Создаваемая библиотека пригодится в других файлах, поэтому экспортируем ее. Если бы этого не было, то и экспортировать не надо было бы, т.к. она уже в глобальном объекте window
export default $;
